package bmr_main_package;

import java.io.File;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Krzysztof
 */
public class FileExportForm extends javax.swing.JDialog
{

    // Class attributes
    private Date dateFrom = CommonDefs.getNow();
    private Date dateTo = CommonDefs.getNow();
    private String exportFileName = "";
    private boolean dataSaved = false;
    private BMR_Measures measures = null;

    /**
     * Creates new form FileExportForm
     */
    public FileExportForm(BMR_Measures measures, String defaultFileName)
    {
        initComponents();

        this.measures = measures;
        for (Measure measure : measures.getAllMeasures())
        {
            this.dateFrom = measure.getDateAsDate();
            break;
        }
        this.exportFileName = defaultFileName;

        ExportParamToScreen(CommonDefs.FIELDS_COPY.DATA_TO_FIELDS);
    }

    /*
    public FileExportForm(java.awt.Frame parent, boolean modal)
    {
        super(parent, modal);
        initComponents();
    }
    */

    // Settings from class members do screen or from screen to class members
    private void ExportParamToScreen(CommonDefs.FIELDS_COPY fieldsCopy)
    {
        switch (fieldsCopy)
        {
            case FIELDS_TO_DATA:
                this.dateFrom = this.comboDateFrom.getSelectedDate().getTime();
                this.dateTo = this.comboDateTo.getSelectedDate().getTime();
                this.exportFileName = this.txtExportFile.getText();
                break;

            case DATA_TO_FIELDS:
                this.comboDateFrom.setSelectedDate(CommonDefs.dateToCalendar(this.dateFrom));
                this.comboDateTo.setSelectedDate(CommonDefs.dateToCalendar(this.dateTo));
                this.txtExportFile.setText(this.exportFileName);
                break;
        }
    }

    // Access to class attributes and classs functions
    public Date GetDateFrom()
    {
        return this.dateFrom;
    }

    public Date GetDateTo()
    {
        return this.dateTo;
    }

    public String GetExportFileName()
    {
        return this.exportFileName;
    }

    public boolean isSaved()
    {
        return this.dataSaved;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        panelExportParameters = new javax.swing.JPanel();
        labDateFrom = new javax.swing.JLabel();
        comboDateFrom = new datechooser.beans.DateChooserCombo();
        labDateTo = new javax.swing.JLabel();
        comboDateTo = new datechooser.beans.DateChooserCombo();
        labExportFile = new javax.swing.JLabel();
        txtExportFile = new javax.swing.JTextField();
        butExportFile = new javax.swing.JButton();
        butPerformExport = new javax.swing.JButton();
        butCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setModalityType(java.awt.Dialog.ModalityType.APPLICATION_MODAL);
        setResizable(false);

        panelExportParameters.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        labDateFrom.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labDateFrom.setText("Date from:");
        labDateFrom.setToolTipText("Measurement date");

        comboDateFrom.setCurrentView(new datechooser.view.appearance.AppearancesList("Swing",
            new datechooser.view.appearance.ViewAppearance("custom",
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 11),
                    new java.awt.Color(0, 0, 0),
                    new java.awt.Color(0, 0, 255),
                    false,
                    true,
                    new datechooser.view.appearance.swing.ButtonPainter()),
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 11),
                    new java.awt.Color(0, 0, 0),
                    new java.awt.Color(0, 0, 255),
                    true,
                    true,
                    new datechooser.view.appearance.swing.ButtonPainter()),
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 11),
                    new java.awt.Color(0, 0, 255),
                    new java.awt.Color(0, 0, 255),
                    false,
                    true,
                    new datechooser.view.appearance.swing.ButtonPainter()),
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 11),
                    new java.awt.Color(128, 128, 128),
                    new java.awt.Color(0, 0, 255),
                    false,
                    true,
                    new datechooser.view.appearance.swing.LabelPainter()),
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 11),
                    new java.awt.Color(0, 0, 0),
                    new java.awt.Color(0, 0, 255),
                    false,
                    true,
                    new datechooser.view.appearance.swing.LabelPainter()),
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 11),
                    new java.awt.Color(0, 0, 0),
                    new java.awt.Color(255, 0, 0),
                    false,
                    false,
                    new datechooser.view.appearance.swing.ButtonPainter()),
                (datechooser.view.BackRenderer)null,
                false,
                true)));
    comboDateFrom.setCalendarPreferredSize(new java.awt.Dimension(350, 250));
    comboDateFrom.setNothingAllowed(false);
    comboDateFrom.setBehavior(datechooser.model.multiple.MultyModelBehavior.SELECT_SINGLE);

    labDateTo.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    labDateTo.setText("To:");
    labDateTo.setToolTipText("Measurement date");

    comboDateTo.setCurrentView(new datechooser.view.appearance.AppearancesList("Swing",
        new datechooser.view.appearance.ViewAppearance("custom",
            new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 11),
                new java.awt.Color(0, 0, 0),
                new java.awt.Color(0, 0, 255),
                false,
                true,
                new datechooser.view.appearance.swing.ButtonPainter()),
            new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 11),
                new java.awt.Color(0, 0, 0),
                new java.awt.Color(0, 0, 255),
                true,
                true,
                new datechooser.view.appearance.swing.ButtonPainter()),
            new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 11),
                new java.awt.Color(0, 0, 255),
                new java.awt.Color(0, 0, 255),
                false,
                true,
                new datechooser.view.appearance.swing.ButtonPainter()),
            new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 11),
                new java.awt.Color(128, 128, 128),
                new java.awt.Color(0, 0, 255),
                false,
                true,
                new datechooser.view.appearance.swing.LabelPainter()),
            new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 11),
                new java.awt.Color(0, 0, 0),
                new java.awt.Color(0, 0, 255),
                false,
                true,
                new datechooser.view.appearance.swing.LabelPainter()),
            new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 11),
                new java.awt.Color(0, 0, 0),
                new java.awt.Color(255, 0, 0),
                false,
                false,
                new datechooser.view.appearance.swing.ButtonPainter()),
            (datechooser.view.BackRenderer)null,
            false,
            true)));
comboDateTo.setCalendarPreferredSize(new java.awt.Dimension(350, 250));
comboDateTo.setNothingAllowed(false);
comboDateTo.setBehavior(datechooser.model.multiple.MultyModelBehavior.SELECT_SINGLE);

labExportFile.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
labExportFile.setText("Export file:");
labExportFile.setToolTipText("File containing blood measures");

txtExportFile.setToolTipText("File containig blood measures");

butExportFile.setText("...");
butExportFile.setToolTipText("Select file");
butExportFile.addActionListener(new java.awt.event.ActionListener()
{
    public void actionPerformed(java.awt.event.ActionEvent evt)
    {
        butExportFileActionPerformed(evt);
    }
    });

    butPerformExport.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bmr_main_package/Icons/Export-To-File-icon.png"))); // NOI18N
    butPerformExport.setToolTipText("Perform Export");
    butPerformExport.addActionListener(new java.awt.event.ActionListener()
    {
        public void actionPerformed(java.awt.event.ActionEvent evt)
        {
            butPerformExportActionPerformed(evt);
        }
    });

    butCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bmr_main_package/Icons/Actions-button-cancel-icon.png"))); // NOI18N
    butCancel.setToolTipText("Cancel export");
    butCancel.addActionListener(new java.awt.event.ActionListener()
    {
        public void actionPerformed(java.awt.event.ActionEvent evt)
        {
            butCancelActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout panelExportParametersLayout = new javax.swing.GroupLayout(panelExportParameters);
    panelExportParameters.setLayout(panelExportParametersLayout);
    panelExportParametersLayout.setHorizontalGroup(
        panelExportParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(panelExportParametersLayout.createSequentialGroup()
            .addGroup(panelExportParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panelExportParametersLayout.createSequentialGroup()
                    .addGap(21, 21, 21)
                    .addGroup(panelExportParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(labExportFile, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(labDateFrom, javax.swing.GroupLayout.Alignment.TRAILING))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(panelExportParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(panelExportParametersLayout.createSequentialGroup()
                            .addComponent(comboDateFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(45, 45, 45)
                            .addComponent(labDateTo)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(comboDateTo, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(panelExportParametersLayout.createSequentialGroup()
                            .addComponent(txtExportFile, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(butExportFile, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(panelExportParametersLayout.createSequentialGroup()
                    .addGap(130, 130, 130)
                    .addComponent(butPerformExport)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(butCancel)))
            .addGap(0, 21, Short.MAX_VALUE))
    );
    panelExportParametersLayout.setVerticalGroup(
        panelExportParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(panelExportParametersLayout.createSequentialGroup()
            .addGap(37, 37, 37)
            .addGroup(panelExportParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                .addComponent(labDateFrom)
                .addComponent(comboDateFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(labDateTo)
                .addComponent(comboDateTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(20, 20, 20)
            .addGroup(panelExportParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(butExportFile)
                .addComponent(txtExportFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(labExportFile))
            .addGap(32, 32, 32)
            .addGroup(panelExportParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(butCancel)
                .addComponent(butPerformExport))
            .addContainerGap(24, Short.MAX_VALUE))
    );

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(panelExportParameters, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(panelExportParameters, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );

    pack();
    }// </editor-fold>//GEN-END:initComponents

    private void butExportFileActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_butExportFileActionPerformed
    {//GEN-HEADEREND:event_butExportFileActionPerformed
        FileFilter filter = new FileNameExtensionFilter("Excel files", "xls");
        JFileChooser fileChooser = new JFileChooser();

        fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        fileChooser.setDialogTitle("Select Excel file for export your blood measures");
        fileChooser.setMultiSelectionEnabled(false);
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);

        fileChooser.setFileFilter(filter);

        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION)
        {
            File selectedFile = fileChooser.getSelectedFile();
            this.txtExportFile.setText(selectedFile.getAbsolutePath());
        }
    }//GEN-LAST:event_butExportFileActionPerformed

    private void butPerformExportActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_butPerformExportActionPerformed
    {//GEN-HEADEREND:event_butPerformExportActionPerformed
        ExportParamToScreen(CommonDefs.FIELDS_COPY.FIELDS_TO_DATA);
        
        ExcelReadWrite erw = new ExcelReadWrite(this.measures);
        
        if (dataSaved = erw.writeFile(this.exportFileName, this.dateFrom, this.dateTo) == true)
        {
            CommonDefs.infoBox("Export successfully performed\r\nFile: " + this.exportFileName, "Measures export to Excel file");
        } else
        {
            CommonDefs.infoBox("Export failed\r\nFile: " + this.exportFileName, "Measures export to Excel file");
        }
      
        this.dispose();
    }//GEN-LAST:event_butPerformExportActionPerformed

    private void butCancelActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_butCancelActionPerformed
    {//GEN-HEADEREND:event_butCancelActionPerformed
        this.dispose();
    }//GEN-LAST:event_butCancelActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butCancel;
    private javax.swing.JButton butExportFile;
    private javax.swing.JButton butPerformExport;
    private datechooser.beans.DateChooserCombo comboDateFrom;
    private datechooser.beans.DateChooserCombo comboDateTo;
    private javax.swing.JLabel labDateFrom;
    private javax.swing.JLabel labDateTo;
    private javax.swing.JLabel labExportFile;
    private javax.swing.JPanel panelExportParameters;
    private javax.swing.JTextField txtExportFile;
    // End of variables declaration//GEN-END:variables
}
